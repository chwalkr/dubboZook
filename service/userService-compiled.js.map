{"version":3,"sources":["userService.js"],"names":[],"mappings":"AAAA;;AACA,IAAI,UAAU,QAAQ,UAAR,CAAd;AACA,IAAI,aAAa,QAAQ,uBAAR,EAAiC,UAAlD;AACA,IAAI,QAAS,QAAQ,mBAAR,CAAb;AACA,IAAI,MAAO,QAAQ,kBAAR,EAA4B,GAAvC;AACA,IAAM,mBAAmB,QAAzB,C,CAAkC;AAClC,IAAI,cAAc;AACd;;;;;AAKA,iBAAY,qBAAU,GAAV,EAAe;AACvB,YAAG,CAAC,GAAJ,EAAS,OAAO,IAAP;AACT,YAAG;AACC,gBAAI,MAAM,IAAI,OAAJ,CAAY,GAAtB;AACA,gBAAG,CAAC,GAAJ,EAAS,OAAQ,IAAR;AACT,mBAAO,MAAM,iBAAN,CAAwB,GAAxB,EAA6B,gBAA7B,CAAP;AACH,SAJD,CAIC,OAAM,CAAN,EAAQ,CACR;AACD,eAAO,IAAP;AACH,KAfa;AAgBd;;;;;AAKA,mBAAc,uBAAU,GAAV,EAAe;AACzB,YAAI,MAAM,KAAK,WAAL,CAAiB,GAAjB,CAAV;AACA,eAAO,IAAI,OAAJ,CAAY,UAAU,OAAV,EAAmB,MAAnB,EAA2B;AAC1C,gBAAG,OAAO,KAAV,EAAgB;AACb,uBAAO,QAAQ,EAAC,IAAG,CAAJ,EAAO,MAAK,EAAC,UAAS,MAAV,EAAiB,QAAO,MAAxB,EAAZ,EAAR,CAAP;AACF;AACD,gBAAG,CAAC,GAAJ,EAAS,OAAO,OAAO,EAAC,IAAG,CAAJ,EAAO,KAAI,WAAX,EAAP,CAAP;AACT,uBAAW,MAAX,CAAkB,WAAlB,EACI,CACI,EAAC,QAAO,gBAAR,EAAyB,KAAI,WAAW,GAAX,CAA7B,EADJ,CADJ,EAGM,UAAU,GAAV,EAAe,GAAf,EAAoB;AAClB,oBAAI,GAAJ,EAAS;AACL,4BAAQ,GAAR,CAAY,yBAAZ,EAAuC,GAAvC;AACA,2BAAO,OAAO,EAAC,IAAG,CAAJ,EAAM,KAAI,QAAV,EAAP,CAAP;AACH;AACD;AACA,oBAAG,CAAC,GAAJ,EAAQ;AACJ,2BAAO,OAAO,EAAC,IAAG,CAAJ,EAAM,KAAI,OAAV,EAAP,CAAP;AACH;AACD,wBAAQ,EAAC,IAAG,CAAJ,EAAO,MAAK,GAAZ,EAAR;AACH,aAbL;AAcH,SAnBM,CAAP;AAoBH;AA3Ca,CAAlB;AA6CA,OAAO,OAAP,GAAiB,WAAjB","file":"userService-compiled.js","sourcesContent":["'use strict';\r\nvar Promise = require('bluebird');\r\nvar userRemote = require('../remote/dubboRemote').userRemote;\r\nvar XXTea =  require('../util/XXTeaUtil');\r\nvar env =  require('../config/config').env;\r\nconst USER_ENCRYPT_KEY = 'center';//与会员服务约定的uid解密key\r\nvar UserService = {\r\n    /**\r\n     * 查询当前用户id，sync method\r\n     * @param req\r\n     * @returns uid\r\n     */\r\n    queryUserId:function (req) {\r\n        if(!req) return null;\r\n        try{\r\n            let pgc = req.cookies.PGC;\r\n            if(!pgc) return  null;\r\n            return XXTea.decryptFromBase64(pgc, USER_ENCRYPT_KEY);\r\n        }catch(e){\r\n        }\r\n        return null;\r\n    },\r\n    /**\r\n     * 查询当前用户信息\r\n     * @param req\r\n     * @returns a  promise of userInfo\r\n     */\r\n    queryUserInfo:function (req) {\r\n        let uid = this.queryUserId(req);\r\n        return new Promise(function (resolve, reject) {\r\n            if(env == 'DEV'){\r\n               return resolve({rs:1, data:{trueName:'test',userId:123456}});\r\n            }\r\n            if(!uid) return reject({rs:0, msg:'当前未登录或已过期'});\r\n            userRemote.excute('queryUser',\r\n                [\r\n                    {$class:'java.lang.Long','$':parseFloat(uid)}\r\n                ],function (err, dto) {\r\n                    if (err) {\r\n                        console.log('invoke queryUser error:', err);\r\n                        return reject({rs:0,msg:'内部服务异常'});\r\n                    }\r\n                    //处理数据\r\n                    if(!dto){\r\n                        return reject({rs:0,msg:'用户不存在'});\r\n                    }\r\n                    resolve({rs:1, data:dto});\r\n                });\r\n        });\r\n    }\r\n}\r\nmodule.exports = UserService;"]}