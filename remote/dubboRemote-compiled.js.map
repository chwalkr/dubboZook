{"version":3,"sources":["dubboRemote.js"],"names":[],"mappings":";;AAAA,IAAI,OAAO,QAAQ,UAAR,CAAX;AACA,IAAI,cAAc,QAAQ,aAAR,CAAlB;AACA,IAAI,MAAM,QAAQ,KAAR,CAAV;AACA;AACA,KAAK,SAAL,CAAe,WAAf,GAA6B,UAAU,IAAV,EAAgB,OAAhB,EAAyB,EAAzB,EAA6B;AACtD,QAAI,OAAO,IAAX;AACA,QAAI,QAAQ,YAAY,IAAZ,GAAmB,YAA/B;AACA,WAAO,KAAK,OAAL,CAAa,WAAb,CAAyB,KAAzB,EAAgC,UAAU,GAAV,EAAe,QAAf,EAAyB;AAC5D,YAAI,KAAJ,EAAW,MAAX,EAAmB,QAAnB,EAA6B,CAA7B,EAAgC,CAAhC;AACA,YAAI,GAAJ,EAAS;AACL,mBAAO,GAAG,GAAH,CAAP;AACH;;AAED,YAAI,YAAY,CAAC,SAAS,MAA1B,EAAkC;AAC9B,mBAAO,GAAG,yCAAyC,KAAzC,GACN,0BADG,CAAP;AAEH;;AAED,YAAI;AACA,iBAAK,IAAI,CAAJ,EAAO,IAAI,SAAS,MAAzB,EAAiC,IAAI,CAArC,EAAwC,GAAxC,EAA6C;AACzC,wBAAQ,YAAY,KAAZ,CAAkB,mBAAmB,SAAS,CAAT,CAAnB,CAAlB,CAAR;AACA;AACA;AACA,oBAAI,MAAM,OAAN,KAAkB,OAAlB,IAA6B,MAAM,aAAN,IAAqB,UAAtD,EAAmE;AAC/D;AACH;AACJ;AACD;AACA,qBAAS,IAAI,KAAJ,CAAU,OAAO,IAAP,CAAY,KAAZ,EAAmB,CAAnB,CAAV,CAAT;AACA,uBAAW;AACP,sBAAM,OAAO,QADN;AAEP,sBAAM,OAAO,IAFN;AAGP,yBAAS,MAAM,OAAN,CAAc,KAAd,CAAoB,GAApB;AAHF,aAAX;AAKA,iBAAK,MAAL,CAAY,IAAZ,IAAoB,QAApB;AACH,SAjBD,CAiBE,OAAO,GAAP,EAAY;AACV,mBAAO,GAAG,GAAH,CAAP;AACH;;AAED,eAAO,GAAG,KAAH,EAAU,QAAV,CAAP;AACH,KAjCM,CAAP;AAkCH,CArCD;;AAuCA,IAAI,KAAK,IAAI,IAAJ,CAAS;AACd;AACA,UAAM,kFAFQ;AAGd,WAAO;AAHO,CAAT,CAAT;AAKA,GAAG,MAAH,CAAU,EAAV,CAAa,WAAb,EAA0B,SAAS,OAAT,CAAiB,GAAjB,EAAsB;AAC5C,YAAQ,GAAR,CAAY,kDAAZ;AACH,CAFD;;AAKA;AACA,GAAG,OAAH;AACA,OAAO,OAAP,CAAe,UAAf,GAA4B,GAAG,UAAH,CAAc,kCAAd,CAA5B","file":"dubboRemote-compiled.js","sourcesContent":["var Zook = require('zoodubbo');\nvar querystring = require('querystring');\nvar url = require('url');\n//重写zoodubbo里面的getProvider，只采用hessian2序列化协议的provider\nZook.prototype.getProvider = function (path, version, cb) {\n    var self = this;\n    var _path = '/dubbo/' + path + '/providers';\n    return self._client.getChildren(_path, function (err, children) {\n        var child, parsed, provider, i, l;\n        if (err) {\n            return cb(err);\n        }\n\n        if (children && !children.length) {\n            return cb('Can\\'t find children from the node: ' + _path +\n                ' ,please check the path!');\n        }\n\n        try {\n            for (i = 0, l = children.length; i < l; i++) {\n                child = querystring.parse(decodeURIComponent(children[i]));\n                //console.log('A======================'+i,JSON.stringify(child));\n                //console.log(child);\n                if (child.version === version || child.serialization=='hessian2' ) {\n                    break;\n                }\n            }\n            //console.log('======================final：',JSON.stringify(child));\n            parsed = url.parse(Object.keys(child)[0]);\n            provider = {\n                host: parsed.hostname,\n                port: parsed.port,\n                methods: child.methods.split(',')\n            };\n            self._cache[path] = provider;\n        } catch (err) {\n            return cb(err);\n        }\n\n        return cb(false, provider);\n    });\n};\n\nvar zd = new Zook({\n    // config the addresses of zookeeper\n    conn: 'inner.dubbo1.woqu.com:2188,inner.dubbo2.woqu.com:2188,inner.dubbo3.woqu.com:2188',\n    dubbo: '2.5.3'\n});\nzd.client.on('connected', function connect(rsp) {\n    console.log('zookeeper client (for dubbo protocol) connected!');\n});\n\n\n// connect to zookeeper\nzd.connect();\nmodule.exports.userRemote = zd.getInvoker('com.woqu.ess.service.UserService');\n\n"]}